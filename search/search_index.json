{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022-2023 \u041d\u0435\u0441\u0442\u0435\u0440\u043e\u0432 \u0412\u043b\u0430\u0434\u0438\u0441\u043b\u0430\u0432, \u0433\u0440\u0443\u043f\u043f\u0430 K33421","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022-2023"},{"location":"#web-2022-2023","text":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022-2023"},{"location":"#k33421","text":"","title":"\u041d\u0435\u0441\u0442\u0435\u0440\u043e\u0432 \u0412\u043b\u0430\u0434\u0438\u0441\u043b\u0430\u0432, \u0433\u0440\u0443\u043f\u043f\u0430 K33421"},{"location":"lab_work2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u0439\u0442, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a Django 3 \u0438 \u0421\u0423\u0411\u0414 PostgreSQL *, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. \u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439, \u0441\u043f\u0438\u0441\u043e\u043a \u0442\u0435\u043c\u0430\u0442\u0438\u043a, \u043c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u0438\u044f. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0430\u0432\u0442\u043e\u0440\u043e\u0432 \u0434\u043b\u044f \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439 \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f (\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u043d \u043a \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u043d\u0435\u0442) \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django- admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b: models.py from django.contrib.auth.models import AbstractUser, User from django.db import models from django.conf import settings class Conference(models.Model): name = models.CharField(\"conference\", max_length=50) topic = models.CharField(\"topic\", blank=True, choices=[ (\"business\", \"business\"), (\"design\", \"design\"), (\"physics\", \"physics\"), ], max_length=10) location = models.CharField(\"location\", max_length=100) start_date = models.DateField(\"start date\") end_date = models.DateField(\"end date\") description = models.CharField(\"conference description\", max_length=200) location_description = models.CharField(\"location description\", max_length=200) terms = models.CharField(\"participation terms\", max_length=1000) speaker = models.ManyToManyField(User, related_name=\"speaker\") recommend = models.CharField(\"recommend\", choices=[ (\"yes\", \"yes\"), (\"no\", \"no\"), ], max_length=3) class Meta: verbose_name = \"conference\" verbose_name_plural = \"conferences\" def __str__(self): return f\"{self.topic}: {self.name}\" def written_by(self): return \", \".join([str(p) for p in self.speaker.all()]) class Comment(models.Model): name = models.ForeignKey(Conference, on_delete=models.CASCADE, verbose_name=\"conference\") author = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name=\"comment author\") text = models.CharField(\"comment\", max_length=100) rating = models.CharField(\"rating\", choices =[ (\"1\",\"1\"), (\"2\",\"2\"), (\"3\",\"3\"), (\"4\",\"4\"), (\"5\",\"5\"), (\"6\",\"6\"), (\"7\",\"7\"), (\"8\",\"8\"), (\"9\",\"9\"), (\"10\",\"10\"), ], max_length=2) class Meta: verbose_name = \"comment\" verbose_name_plural = \"comments\" def __str__(self): return f\"{self.author}: {self.text}\" views.py from django.shortcuts import render, redirect from django.views import generic from django.views.generic.edit import FormMixin from django.http import HttpResponseRedirect from django.urls import reverse from .forms import PostComment from .models import Conference, Comment from django.contrib.auth.mixins import LoginRequiredMixin def index(request): return render(request, \"index.html\") class ConferenceView(generic.ListView): model = Conference context_object_name = \"conferences\" queryset = Conference.objects.all() template_name = \"conferences.html\" class ConferenceDetailView(FormMixin, generic.DetailView): model = Conference template_name = \"conference-detail.html\" form_class = PostComment def get_context_data(self, **kwargs): context = super(ConferenceDetailView, self).get_context_data(**kwargs) context[\"form\"] = PostComment( initial={\"name\": self.object, \"author\": self.request.user} ) context[\"comments\"] = Comment.objects.filter(name=self.get_object()).all() return context def post(self, request, *args, **kwargs): self.object = self.get_object() form = self.get_form() if form.is_valid(): form.save() return HttpResponseRedirect( reverse(\"conference-detail\", args=(self.object.pk,)) ) forms.py from django.forms import ModelForm, Textarea, HiddenInput from .models import Comment class PostComment(ModelForm): class Meta: model = Comment fields = [\"name\", \"text\", \"author\", \"rating\"] labels = { \"text\": \"Write your comment here\", } widgets = { \"conference\": HiddenInput(), \"text\": Textarea(attrs={\"cols\": 70, \"rows\": 10}), \"author\": HiddenInput(), } urls.py from django.urls import path from .views import index, ConferenceView, ConferenceDetailView urlpatterns = [ path(\"\", index, name=\"index\"), path(\"conferences/\", ConferenceView.as_view(), name=\"conferences\"), path( \"conferences/<slug:pk>/\", ConferenceDetailView.as_view(), name=\"conference-detail\", ), ]","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lab_work2/#no2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lab_work2/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u0439\u0442, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a Django 3 \u0438 \u0421\u0423\u0411\u0414 PostgreSQL *, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. \u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439, \u0441\u043f\u0438\u0441\u043e\u043a \u0442\u0435\u043c\u0430\u0442\u0438\u043a, \u043c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u0438\u044f. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0430\u0432\u0442\u043e\u0440\u043e\u0432 \u0434\u043b\u044f \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439 \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f (\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u043d \u043a \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u043d\u0435\u0442) \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django- admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"lab_work2/#_2","text":"models.py from django.contrib.auth.models import AbstractUser, User from django.db import models from django.conf import settings class Conference(models.Model): name = models.CharField(\"conference\", max_length=50) topic = models.CharField(\"topic\", blank=True, choices=[ (\"business\", \"business\"), (\"design\", \"design\"), (\"physics\", \"physics\"), ], max_length=10) location = models.CharField(\"location\", max_length=100) start_date = models.DateField(\"start date\") end_date = models.DateField(\"end date\") description = models.CharField(\"conference description\", max_length=200) location_description = models.CharField(\"location description\", max_length=200) terms = models.CharField(\"participation terms\", max_length=1000) speaker = models.ManyToManyField(User, related_name=\"speaker\") recommend = models.CharField(\"recommend\", choices=[ (\"yes\", \"yes\"), (\"no\", \"no\"), ], max_length=3) class Meta: verbose_name = \"conference\" verbose_name_plural = \"conferences\" def __str__(self): return f\"{self.topic}: {self.name}\" def written_by(self): return \", \".join([str(p) for p in self.speaker.all()]) class Comment(models.Model): name = models.ForeignKey(Conference, on_delete=models.CASCADE, verbose_name=\"conference\") author = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name=\"comment author\") text = models.CharField(\"comment\", max_length=100) rating = models.CharField(\"rating\", choices =[ (\"1\",\"1\"), (\"2\",\"2\"), (\"3\",\"3\"), (\"4\",\"4\"), (\"5\",\"5\"), (\"6\",\"6\"), (\"7\",\"7\"), (\"8\",\"8\"), (\"9\",\"9\"), (\"10\",\"10\"), ], max_length=2) class Meta: verbose_name = \"comment\" verbose_name_plural = \"comments\" def __str__(self): return f\"{self.author}: {self.text}\" views.py from django.shortcuts import render, redirect from django.views import generic from django.views.generic.edit import FormMixin from django.http import HttpResponseRedirect from django.urls import reverse from .forms import PostComment from .models import Conference, Comment from django.contrib.auth.mixins import LoginRequiredMixin def index(request): return render(request, \"index.html\") class ConferenceView(generic.ListView): model = Conference context_object_name = \"conferences\" queryset = Conference.objects.all() template_name = \"conferences.html\" class ConferenceDetailView(FormMixin, generic.DetailView): model = Conference template_name = \"conference-detail.html\" form_class = PostComment def get_context_data(self, **kwargs): context = super(ConferenceDetailView, self).get_context_data(**kwargs) context[\"form\"] = PostComment( initial={\"name\": self.object, \"author\": self.request.user} ) context[\"comments\"] = Comment.objects.filter(name=self.get_object()).all() return context def post(self, request, *args, **kwargs): self.object = self.get_object() form = self.get_form() if form.is_valid(): form.save() return HttpResponseRedirect( reverse(\"conference-detail\", args=(self.object.pk,)) ) forms.py from django.forms import ModelForm, Textarea, HiddenInput from .models import Comment class PostComment(ModelForm): class Meta: model = Comment fields = [\"name\", \"text\", \"author\", \"rating\"] labels = { \"text\": \"Write your comment here\", } widgets = { \"conference\": HiddenInput(), \"text\": Textarea(attrs={\"cols\": 70, \"rows\": 10}), \"author\": HiddenInput(), } urls.py from django.urls import path from .views import index, ConferenceView, ConferenceDetailView urlpatterns = [ path(\"\", index, name=\"index\"), path(\"conferences/\", ConferenceView.as_view(), name=\"conferences\"), path( \"conferences/<slug:pk>/\", ConferenceDetailView.as_view(), name=\"conference-detail\", ), ]","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b:"},{"location":"lab_work3/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0412\u044b\u0441\u0442\u0430\u0432\u043a\u0430 \u0441\u043e\u0431\u0430\u043a \u0417\u0430\u043f\u0440\u043e\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0434\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c: - \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 DjangoORM (\u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u043d\u0430 \u043a\u043e\u043d\u0441\u0443\u043b\u044c\u0442\u0430\u0446\u0438\u0438). - \u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438, \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043c \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u0442\u044c \u043a \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044e \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django ORM. - \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 \u0440\u0430\u0431\u043e\u0442\u0443 API \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django REST Framework (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434\u044b \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438). models.py from django.db import models from django.contrib.auth.models import AbstractUser class Organizer(AbstractUser): tel = models.CharField(verbose_name='\u0422\u0435\u043b\u0435\u0444\u043e\u043d', max_length=15, null=True, blank=True) REQUIRED_FIELDS = ['first_name', 'last_name', 'tel'] def __str__(self): return self.username class Participant(models.Model): name = models.CharField(max_length=100) breed_types = ( ('h', 'haski'), ('t', 'terrier'), ('b', 'bulldog'), ) breed = models.CharField(max_length=1, choices=breed_types) age = models.IntegerField() family = models.CharField(max_length=1000) owner_data = models.CharField(max_length=1000) club = models.ForeignKey('Club', on_delete=models.CASCADE, null=True, blank=True ) def str(self): return self.name class Show(models.Model): year = models.IntegerField(primary_key=True) show_types = ( ('mono', 'mono-breed'), ('poly', 'poly-breed') ) type = models.CharField(max_length=4, choices=show_types) participants = models.ManyToManyField('Participant', # through='Participation', related_name='show_participants' ) def str(self): return str(self.year) class Participation(models.Model): participant = models.ForeignKey('Participant', on_delete=models.CASCADE) medal_types = ( ('g', 'gold'), ('s', 'silver'), ('b', 'bronze'), ) medal = models.CharField(max_length=1, choices=medal_types, null=True, blank=True) rings = models.ManyToManyField('Ring', null=True, blank=True) vaccinated = models.DateField() dismissed = models.BooleanField() final_grade = models.IntegerField(blank=True, null=True) def str(self): return f'{self.participant}' class Expert(models.Model): name = models.CharField(max_length=50) last_name = models.CharField(max_length=50) club = models.CharField(max_length=100) def str(self): return f'{self.name} {self.last_name}' class Club(models.Model): name = models.CharField(max_length=100) members = models.ManyToManyField('Participant', related_name='club_members' ) def str(self): return self.name class Ring(models.Model): show = models.ForeignKey('Show', on_delete=models.CASCADE) experts = models.ManyToManyField('Expert', # through='Grade' related_name='ring_experts', null=True, blank=True ) breed_types = ( ('h', 'haski'), ('t', 'terrier'), ('b', 'bulldog'), ) breed = models.CharField(max_length=1, choices=breed_types) def str(self): return f'{self.show} {self.breed}' views.py from rest_framework import generics from rest_framework.views import APIView, Response from rest_framework.permissions import IsAuthenticated from .serializers import * from .models import * from django.db.models.aggregates import Count, Sum class ExpertAPIView(generics.RetrieveUpdateDestroyAPIView): serializer_class = ExpertSerializer queryset = Expert.objects.all() class ParticipationAPIList(generics.ListCreateAPIView): serializer_class = ParticipationSerializer queryset = Participation.objects.all() # permission_classes = [IsAuthenticated] class ParticipantAPIList(generics.ListCreateAPIView): serializer_class = ParticipantSerializer queryset = Participant.objects.all() class RingParticipationRetrieveAPIView(generics.RetrieveAPIView): serializer_class = RingParticipationSerializer queryset = Participation.objects.all() class ClubBreedsRetrieveAPIView(generics.RetrieveAPIView): serializer_class = ClubBreedsSerializer queryset = Club.objects.all() class DismissedCountAPIView(generics.RetrieveAPIView): serializer_class = DismissedCountSerializer queryset = Participation.objects.all() # leave name class BreedExpertsAPIView(generics.ListAPIView): serializer_class = BreedExpertsSerializer queryset = Ring.objects.all() class BreedCountAPIView(APIView): def get(self, request): # breed_count = Participant.objects.filter(breed=breed).count() breed_count = Participant.objects \\ .values('breed').annotate(count=Count('breed')) content = {'breed_count': breed_count} return Response(content) class BreedCountAPIView(APIView): def get(self, request): # breed_count = Participant.objects.filter(breed=breed).count() breed_count = Ring.objects \\ .values('breed').annotate(count=Count('breed')) content = {'breed_count': breed_count} return Response(content) class ReportAPIView(APIView): def get(self, request, year): participants = Show.objects.get(year=year).participants participant_count = participants.count() breed_count = participants.values('breed').annotate(count=Count('breed')) best_grades = Participation.objects.filter(rings__show__year=year)\\ .values('participant')\\ .annotate(ex_sum=Sum('final_grade'))\\ .order_by() medals = Participation.objects.values('rings__breed')\\ .annotate(medals_count=Count('medal')) content = {'participant_count': participant_count, 'breeds': breed_count, 'best_grades': best_grades, 'medals': medals} return Response(content) serializers.py from rest_framework import serializers from .models import * class ExpertSerializer(serializers.ModelSerializer): class Meta: model = Expert fields = \"__all__\" class ParticipationSerializer(serializers.ModelSerializer): class Meta: model = Participation fields = \"__all__\" class ParticipantSerializer(serializers.ModelSerializer): class Meta: model = Participant fields = \"__all__\" class RingParticipationSerializer(serializers.ModelSerializer): class Meta: model = Participation fields = [\"rings\"] class ParticipantBreedsSerializer(serializers.ModelSerializer): class Meta: model = Participant fields = [\"breed\"] class ClubBreedsSerializer(serializers.ModelSerializer): members = ParticipantBreedsSerializer(many=True) class Meta: model = Club fields = [\"name\", \"members\"] class RingSerializer(serializers.ModelSerializer): class Meta: model = Ring fields = \"__all__\" class DismissedCountSerializer(serializers.ModelSerializer): dismissed_count = serializers.SerializerMethodField() class Meta: model = Participation fields = [\"dismissed_count\"] def get_dismissed_count(self, obj): return Participation.objects.filter(dismissed=True).count() class BreedExpertsSerializer(serializers.ModelSerializer): experts = ExpertSerializer(many=True) class Meta: model = Ring fields = [\"breed\", \"experts\"] urls.py from django.urls import path from .views import * app_name = \"dogsapp\" urlpatterns = [ path('experts/<int:pk>', ExpertAPIView.as_view()), path('participation/', ParticipationAPIList.as_view()), path('participants/', ParticipantAPIList.as_view()), path('participant_ring/<int:pk>', RingParticipationRetrieveAPIView.as_view()), path('club_breeds/<int:pk>', ClubBreedsRetrieveAPIView.as_view()), path('dismissed_count/<int:pk>', DismissedCountAPIView.as_view()), path('breed_experts/', BreedExpertsAPIView.as_view()), path('breeds_count/', BreedCountAPIView.as_view()), path('report/<int:year>', ReportAPIView.as_view()), ]","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"lab_work3/#no3","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"lab_work3/#_1","text":"\u0412\u044b\u0441\u0442\u0430\u0432\u043a\u0430 \u0441\u043e\u0431\u0430\u043a \u0417\u0430\u043f\u0440\u043e\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0434\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c: - \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 DjangoORM (\u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u043d\u0430 \u043a\u043e\u043d\u0441\u0443\u043b\u044c\u0442\u0430\u0446\u0438\u0438). - \u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438, \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043c \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u0442\u044c \u043a \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044e \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django ORM. - \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 \u0440\u0430\u0431\u043e\u0442\u0443 API \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django REST Framework (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434\u044b \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438).","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab_work3/#modelspy","text":"from django.db import models from django.contrib.auth.models import AbstractUser class Organizer(AbstractUser): tel = models.CharField(verbose_name='\u0422\u0435\u043b\u0435\u0444\u043e\u043d', max_length=15, null=True, blank=True) REQUIRED_FIELDS = ['first_name', 'last_name', 'tel'] def __str__(self): return self.username class Participant(models.Model): name = models.CharField(max_length=100) breed_types = ( ('h', 'haski'), ('t', 'terrier'), ('b', 'bulldog'), ) breed = models.CharField(max_length=1, choices=breed_types) age = models.IntegerField() family = models.CharField(max_length=1000) owner_data = models.CharField(max_length=1000) club = models.ForeignKey('Club', on_delete=models.CASCADE, null=True, blank=True ) def str(self): return self.name class Show(models.Model): year = models.IntegerField(primary_key=True) show_types = ( ('mono', 'mono-breed'), ('poly', 'poly-breed') ) type = models.CharField(max_length=4, choices=show_types) participants = models.ManyToManyField('Participant', # through='Participation', related_name='show_participants' ) def str(self): return str(self.year) class Participation(models.Model): participant = models.ForeignKey('Participant', on_delete=models.CASCADE) medal_types = ( ('g', 'gold'), ('s', 'silver'), ('b', 'bronze'), ) medal = models.CharField(max_length=1, choices=medal_types, null=True, blank=True) rings = models.ManyToManyField('Ring', null=True, blank=True) vaccinated = models.DateField() dismissed = models.BooleanField() final_grade = models.IntegerField(blank=True, null=True) def str(self): return f'{self.participant}' class Expert(models.Model): name = models.CharField(max_length=50) last_name = models.CharField(max_length=50) club = models.CharField(max_length=100) def str(self): return f'{self.name} {self.last_name}' class Club(models.Model): name = models.CharField(max_length=100) members = models.ManyToManyField('Participant', related_name='club_members' ) def str(self): return self.name class Ring(models.Model): show = models.ForeignKey('Show', on_delete=models.CASCADE) experts = models.ManyToManyField('Expert', # through='Grade' related_name='ring_experts', null=True, blank=True ) breed_types = ( ('h', 'haski'), ('t', 'terrier'), ('b', 'bulldog'), ) breed = models.CharField(max_length=1, choices=breed_types) def str(self): return f'{self.show} {self.breed}'","title":"models.py"},{"location":"lab_work3/#viewspy","text":"from rest_framework import generics from rest_framework.views import APIView, Response from rest_framework.permissions import IsAuthenticated from .serializers import * from .models import * from django.db.models.aggregates import Count, Sum class ExpertAPIView(generics.RetrieveUpdateDestroyAPIView): serializer_class = ExpertSerializer queryset = Expert.objects.all() class ParticipationAPIList(generics.ListCreateAPIView): serializer_class = ParticipationSerializer queryset = Participation.objects.all() # permission_classes = [IsAuthenticated] class ParticipantAPIList(generics.ListCreateAPIView): serializer_class = ParticipantSerializer queryset = Participant.objects.all() class RingParticipationRetrieveAPIView(generics.RetrieveAPIView): serializer_class = RingParticipationSerializer queryset = Participation.objects.all() class ClubBreedsRetrieveAPIView(generics.RetrieveAPIView): serializer_class = ClubBreedsSerializer queryset = Club.objects.all() class DismissedCountAPIView(generics.RetrieveAPIView): serializer_class = DismissedCountSerializer queryset = Participation.objects.all() # leave name class BreedExpertsAPIView(generics.ListAPIView): serializer_class = BreedExpertsSerializer queryset = Ring.objects.all() class BreedCountAPIView(APIView): def get(self, request): # breed_count = Participant.objects.filter(breed=breed).count() breed_count = Participant.objects \\ .values('breed').annotate(count=Count('breed')) content = {'breed_count': breed_count} return Response(content) class BreedCountAPIView(APIView): def get(self, request): # breed_count = Participant.objects.filter(breed=breed).count() breed_count = Ring.objects \\ .values('breed').annotate(count=Count('breed')) content = {'breed_count': breed_count} return Response(content) class ReportAPIView(APIView): def get(self, request, year): participants = Show.objects.get(year=year).participants participant_count = participants.count() breed_count = participants.values('breed').annotate(count=Count('breed')) best_grades = Participation.objects.filter(rings__show__year=year)\\ .values('participant')\\ .annotate(ex_sum=Sum('final_grade'))\\ .order_by() medals = Participation.objects.values('rings__breed')\\ .annotate(medals_count=Count('medal')) content = {'participant_count': participant_count, 'breeds': breed_count, 'best_grades': best_grades, 'medals': medals} return Response(content)","title":"views.py"},{"location":"lab_work3/#serializerspy","text":"from rest_framework import serializers from .models import * class ExpertSerializer(serializers.ModelSerializer): class Meta: model = Expert fields = \"__all__\" class ParticipationSerializer(serializers.ModelSerializer): class Meta: model = Participation fields = \"__all__\" class ParticipantSerializer(serializers.ModelSerializer): class Meta: model = Participant fields = \"__all__\" class RingParticipationSerializer(serializers.ModelSerializer): class Meta: model = Participation fields = [\"rings\"] class ParticipantBreedsSerializer(serializers.ModelSerializer): class Meta: model = Participant fields = [\"breed\"] class ClubBreedsSerializer(serializers.ModelSerializer): members = ParticipantBreedsSerializer(many=True) class Meta: model = Club fields = [\"name\", \"members\"] class RingSerializer(serializers.ModelSerializer): class Meta: model = Ring fields = \"__all__\" class DismissedCountSerializer(serializers.ModelSerializer): dismissed_count = serializers.SerializerMethodField() class Meta: model = Participation fields = [\"dismissed_count\"] def get_dismissed_count(self, obj): return Participation.objects.filter(dismissed=True).count() class BreedExpertsSerializer(serializers.ModelSerializer): experts = ExpertSerializer(many=True) class Meta: model = Ring fields = [\"breed\", \"experts\"]","title":"serializers.py"},{"location":"lab_work3/#urlspy","text":"from django.urls import path from .views import * app_name = \"dogsapp\" urlpatterns = [ path('experts/<int:pk>', ExpertAPIView.as_view()), path('participation/', ParticipationAPIList.as_view()), path('participants/', ParticipantAPIList.as_view()), path('participant_ring/<int:pk>', RingParticipationRetrieveAPIView.as_view()), path('club_breeds/<int:pk>', ClubBreedsRetrieveAPIView.as_view()), path('dismissed_count/<int:pk>', DismissedCountAPIView.as_view()), path('breed_experts/', BreedExpertsAPIView.as_view()), path('breeds_count/', BreedCountAPIView.as_view()), path('report/<int:year>', ReportAPIView.as_view()), ]","title":"urls.py"},{"location":"pwork3/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3.1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.1 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. models.py from django.db import models from django.contrib.auth.models import AbstractUser # Create your models here. class Car_owner(models.Model): id_owner = models.IntegerField(primary_key = True) last_name = models.CharField(max_length = 30, null = False) first_name = models.CharField(max_length = 30, null = False) birth_day = models.DateField(null = True) passport = models.IntegerField(null=True) address = models.CharField(max_length=50, null=True, blank=True) nationality = models.CharField(max_length=20, null=True, blank=True) class Car(models.Model): id_car = models.IntegerField(primary_key = True) state_number = models.CharField(max_length = 15, null = False) mark_car = models.CharField(max_length = 20, null = False) model_car = models.CharField(max_length = 20, null = False) color = models.CharField(max_length = 30, null = True) class Ownership(models.Model): id_owner_car = models.IntegerField(primary_key = True) id_owner = models.ForeignKey(Car_owner, on_delete = models.CASCADE) id_car = models.ForeignKey(Car, on_delete = models.CASCADE) start_date = models.DateField() end_date = models.DateField(null = True) class Driver_license(models.Model): id_license = models.IntegerField(primary_key = True) id_owner = models.ForeignKey(Car_owner, on_delete = models.CASCADE) license_number = models.CharField(max_length = 10, null = False) type = models.CharField(max_length = 10, null = False) date_of_license= models.DateField() \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432: Car_owner(1, '\u0426\u0430\u0440\u044c\u043a\u043e\u0432', '\u0413\u0440\u0438\u0433\u043e\u0440\u0438\u0439', '1990-01-1').save() Car_owner(2, '\u0413\u0435\u0440\u0430\u0441\u0438\u043c\u043e\u0432', '\u041c\u0430\u043a\u0441\u0438\u043c', '1991-01-1').save() Car_owner(3, '\u0417\u0430\u0445\u0430\u0440\u043e\u0432', '\u0422\u0430\u0438\u0440', '1992-01-1').save() Car_owner(4, '\u041a\u043e\u0441\u0442\u0435\u043d\u044c', '\u0410\u043d\u043d\u0430', '1993-01-1').save() Car_owner(5, '\u0414\u0430\u043b\u044c\u0448\u0435', '\u041b\u0435\u043d\u044c', '1994-01-1').save() for i in Car_owner.objects.all(): ...: print(i) ...: Car_owner object (1) Car_owner object (2) Car_owner object (3) Car_owner object (4) Car_owner object (5) for i in Car_owner.objects.all(): ...: print(i.id_owner) ...: 1 2 3 4 5 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 Car(1, 'A1A1', 'BMW', 'Model1', 'white').save() Car(2, 'B2B2', 'BMW', 'Model2', 'black').save() Car(3, 'C3C3', 'Toyota', 'Model3', 'blue').save() Car(4, 'D4D4', 'Toyota', 'Model4', 'white').save() Car(5, 'E5E5', 'Audi', 'Model5', 'red').save() Car(6, 'F6F6', 'Audi', 'Model6', 'balck').save() \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u043f\u0440\u0430\u0432 Driver_license(1, 1, '1234567', 'B', '2010-01-01').save() Driver_license(2, 2, '4567890', 'B', '2011-01-01').save() Driver_license(3, 3, '6527810', 'B', '2012-01-01').save() Driver_license(4, 4, '65228340', 'B', '2013-01-01').save() Driver_license(5, 5, '15228143', 'B', '2014-01-01').save() Driver_license(6, 6, '13298123', 'B', '2015-01-01').save() \u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 Ownership(1, 1, 1, '2011-01-01', '2012-01-01').save() Ownership(2, 2, 2, '2012-01-01', '2013-01-01').save() Ownership(3, 3, 3, '2013-01-01', '2014-01-01').save() Ownership(4, 4, 4, '2014-01-01', '2015-01-01').save() Ownership(5, 5, 5, '2015-01-01', '2016-01-01').save() Ownership(6, 6, 6, '2016-01-01', '2017-01-01').save() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.2 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: \u0417\u0430\u043f\u0440\u043e\u0441 1 \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c): In [45]: Car.objects.filter(mark_car=\"Toyota\") Out[45]: <QuerySet [<Car: Car object (3)>, <Car: Car object (4)>]> \u0417\u0430\u043f\u0440\u043e\u0441 2 \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435): In [46]: Car_owner.objects.filter(first_name=\"FN3\") Out[46]: <QuerySet [<Car_owner: Car_owner object (3)>]> \u0417\u0430\u043f\u0440\u043e\u0441 3 \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430): In [48]: take_id = Car_owner.objects.all()[1].id_owner In [49]: Driver_license.objects.get(id_owner=take_id) Out[49]: <Driver_license: Driver_license object (2)> \u0417\u0430\u043f\u0440\u043e\u0441 4 \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442): In [2]: Car_owner.objects.filter(ownership__id_car__color = 'red') Out[2]: <QuerySet [<Car_owner: Car_owner object (5)>]> \u0417\u0430\u043f\u0440\u043e\u0441 5 \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435): In [3]: Car_owner.objects.filter(ownership__start_date__gte>\"2010-01-01\") Out[3]: <QuerySet [<Car_owner: Car_owner object (3)>, <Car_owner: Car_owner object (4)>, <Car_owner: Car_owner object (5)>, <Car_owner: Car_owner object (6)>]> \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.3 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: \u0417\u0430\u043f\u0440\u043e\u0441 1 \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: In [59]: from django.db.models import Min, Max In [60]: Driver_license.objects.aggregate(date_of_license=Min(\"date_of_license\")) Out[60]: {'date_of_license': datetime.date(2010, 1, 1)} \u0417\u0430\u043f\u0440\u043e\u0441 2 \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435: In [62]: Ownerdhip.objects.aggregate(start_date=Max(\"start_date\")) Out[62]: {'start_date': datetime.date(2016, 1, 1)} \u0417\u0430\u043f\u0440\u043e\u0441 3 \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: In [64]: from django.db.models import Count In [65]: Ownerdhip.objects.values(\"id_owner\").annotate(Count(\"id_car\")) Out[65]: <QuerySet [{'id_owner': 1, 'id_car__count': 1}, {'id_owner': 2, 'id_car__count': 1}, {'id_owner': 3, 'id_car__count': 1}, {'id_owner': 4, 'id_car__count': 1}, {'id_owner': 5, 'id _car__count': 1}, {'id_owner': 6, 'id_car__count': 1}]> \u0417\u0430\u043f\u0440\u043e\u0441 4 \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: In [66]: Car.objects.values(\"mark_car\").annotate(Count(\"id_car\")) Out[66]: <QuerySet [{'mark_car': 'Audi', 'id_car__count': 2}, {'mark_car': 'BMW', 'id_car__count': 2}, {'mark_car': 'Toyota', 'id_car__count': 2}]> \u0417\u0430\u043f\u0440\u043e\u0441 5 \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: In [79]: Car_owner.objects.order_by(\"driver_license__date_of_license\") Out[79]: <QuerySet [<Car_owner: Car_owner object (1)>, <Car_owner: Car_owner object (2)>, <Car_owner: Car_owner object (3)>, <Car_owner: Car_owner object (4)>, <Car_owner: Car_owner objec t (5)>, <Car_owner: Car_owner object (6)>]>","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3.1"},{"location":"pwork3/#31","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3.1"},{"location":"pwork3/#311","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.1"},{"location":"pwork3/#modelspy","text":"from django.db import models from django.contrib.auth.models import AbstractUser # Create your models here. class Car_owner(models.Model): id_owner = models.IntegerField(primary_key = True) last_name = models.CharField(max_length = 30, null = False) first_name = models.CharField(max_length = 30, null = False) birth_day = models.DateField(null = True) passport = models.IntegerField(null=True) address = models.CharField(max_length=50, null=True, blank=True) nationality = models.CharField(max_length=20, null=True, blank=True) class Car(models.Model): id_car = models.IntegerField(primary_key = True) state_number = models.CharField(max_length = 15, null = False) mark_car = models.CharField(max_length = 20, null = False) model_car = models.CharField(max_length = 20, null = False) color = models.CharField(max_length = 30, null = True) class Ownership(models.Model): id_owner_car = models.IntegerField(primary_key = True) id_owner = models.ForeignKey(Car_owner, on_delete = models.CASCADE) id_car = models.ForeignKey(Car, on_delete = models.CASCADE) start_date = models.DateField() end_date = models.DateField(null = True) class Driver_license(models.Model): id_license = models.IntegerField(primary_key = True) id_owner = models.ForeignKey(Car_owner, on_delete = models.CASCADE) license_number = models.CharField(max_length = 10, null = False) type = models.CharField(max_length = 10, null = False) date_of_license= models.DateField()","title":"models.py"},{"location":"pwork3/#_1","text":"Car_owner(1, '\u0426\u0430\u0440\u044c\u043a\u043e\u0432', '\u0413\u0440\u0438\u0433\u043e\u0440\u0438\u0439', '1990-01-1').save() Car_owner(2, '\u0413\u0435\u0440\u0430\u0441\u0438\u043c\u043e\u0432', '\u041c\u0430\u043a\u0441\u0438\u043c', '1991-01-1').save() Car_owner(3, '\u0417\u0430\u0445\u0430\u0440\u043e\u0432', '\u0422\u0430\u0438\u0440', '1992-01-1').save() Car_owner(4, '\u041a\u043e\u0441\u0442\u0435\u043d\u044c', '\u0410\u043d\u043d\u0430', '1993-01-1').save() Car_owner(5, '\u0414\u0430\u043b\u044c\u0448\u0435', '\u041b\u0435\u043d\u044c', '1994-01-1').save() for i in Car_owner.objects.all(): ...: print(i) ...: Car_owner object (1) Car_owner object (2) Car_owner object (3) Car_owner object (4) Car_owner object (5) for i in Car_owner.objects.all(): ...: print(i.id_owner) ...: 1 2 3 4 5","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432:"},{"location":"pwork3/#_2","text":"Car(1, 'A1A1', 'BMW', 'Model1', 'white').save() Car(2, 'B2B2', 'BMW', 'Model2', 'black').save() Car(3, 'C3C3', 'Toyota', 'Model3', 'blue').save() Car(4, 'D4D4', 'Toyota', 'Model4', 'white').save() Car(5, 'E5E5', 'Audi', 'Model5', 'red').save() Car(6, 'F6F6', 'Audi', 'Model6', 'balck').save()","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439"},{"location":"pwork3/#_3","text":"Driver_license(1, 1, '1234567', 'B', '2010-01-01').save() Driver_license(2, 2, '4567890', 'B', '2011-01-01').save() Driver_license(3, 3, '6527810', 'B', '2012-01-01').save() Driver_license(4, 4, '65228340', 'B', '2013-01-01').save() Driver_license(5, 5, '15228143', 'B', '2014-01-01').save() Driver_license(6, 6, '13298123', 'B', '2015-01-01').save()","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u043f\u0440\u0430\u0432"},{"location":"pwork3/#_4","text":"Ownership(1, 1, 1, '2011-01-01', '2012-01-01').save() Ownership(2, 2, 2, '2012-01-01', '2013-01-01').save() Ownership(3, 3, 3, '2013-01-01', '2014-01-01').save() Ownership(4, 4, 4, '2014-01-01', '2015-01-01').save() Ownership(5, 5, 5, '2015-01-01', '2016-01-01').save() Ownership(6, 6, 6, '2016-01-01', '2017-01-01').save()","title":"\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439"},{"location":"pwork3/#312","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e:","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.2"},{"location":"pwork3/#1","text":"\u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c): In [45]: Car.objects.filter(mark_car=\"Toyota\") Out[45]: <QuerySet [<Car: Car object (3)>, <Car: Car object (4)>]>","title":"\u0417\u0430\u043f\u0440\u043e\u0441 1"},{"location":"pwork3/#2","text":"\u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435): In [46]: Car_owner.objects.filter(first_name=\"FN3\") Out[46]: <QuerySet [<Car_owner: Car_owner object (3)>]>","title":"\u0417\u0430\u043f\u0440\u043e\u0441 2"},{"location":"pwork3/#3","text":"\u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430): In [48]: take_id = Car_owner.objects.all()[1].id_owner In [49]: Driver_license.objects.get(id_owner=take_id) Out[49]: <Driver_license: Driver_license object (2)>","title":"\u0417\u0430\u043f\u0440\u043e\u0441 3"},{"location":"pwork3/#4","text":"\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442): In [2]: Car_owner.objects.filter(ownership__id_car__color = 'red') Out[2]: <QuerySet [<Car_owner: Car_owner object (5)>]>","title":"\u0417\u0430\u043f\u0440\u043e\u0441 4"},{"location":"pwork3/#5","text":"\u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435): In [3]: Car_owner.objects.filter(ownership__start_date__gte>\"2010-01-01\") Out[3]: <QuerySet [<Car_owner: Car_owner object (3)>, <Car_owner: Car_owner object (4)>, <Car_owner: Car_owner object (5)>, <Car_owner: Car_owner object (6)>]>","title":"\u0417\u0430\u043f\u0440\u043e\u0441 5"},{"location":"pwork3/#313","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b:","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.3"},{"location":"pwork3/#1_1","text":"\u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: In [59]: from django.db.models import Min, Max In [60]: Driver_license.objects.aggregate(date_of_license=Min(\"date_of_license\")) Out[60]: {'date_of_license': datetime.date(2010, 1, 1)}","title":"\u0417\u0430\u043f\u0440\u043e\u0441 1"},{"location":"pwork3/#2_1","text":"\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435: In [62]: Ownerdhip.objects.aggregate(start_date=Max(\"start_date\")) Out[62]: {'start_date': datetime.date(2016, 1, 1)}","title":"\u0417\u0430\u043f\u0440\u043e\u0441 2"},{"location":"pwork3/#3_1","text":"\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: In [64]: from django.db.models import Count In [65]: Ownerdhip.objects.values(\"id_owner\").annotate(Count(\"id_car\")) Out[65]: <QuerySet [{'id_owner': 1, 'id_car__count': 1}, {'id_owner': 2, 'id_car__count': 1}, {'id_owner': 3, 'id_car__count': 1}, {'id_owner': 4, 'id_car__count': 1}, {'id_owner': 5, 'id _car__count': 1}, {'id_owner': 6, 'id_car__count': 1}]>","title":"\u0417\u0430\u043f\u0440\u043e\u0441 3"},{"location":"pwork3/#4_1","text":"\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: In [66]: Car.objects.values(\"mark_car\").annotate(Count(\"id_car\")) Out[66]: <QuerySet [{'mark_car': 'Audi', 'id_car__count': 2}, {'mark_car': 'BMW', 'id_car__count': 2}, {'mark_car': 'Toyota', 'id_car__count': 2}]>","title":"\u0417\u0430\u043f\u0440\u043e\u0441 4"},{"location":"pwork3/#5_1","text":"\u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: In [79]: Car_owner.objects.order_by(\"driver_license__date_of_license\") Out[79]: <QuerySet [<Car_owner: Car_owner object (1)>, <Car_owner: Car_owner object (2)>, <Car_owner: Car_owner object (3)>, <Car_owner: Car_owner object (4)>, <Car_owner: Car_owner objec t (5)>, <Car_owner: Car_owner object (6)>]>","title":"\u0417\u0430\u043f\u0440\u043e\u0441 5"}]}